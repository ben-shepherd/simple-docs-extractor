Well-formatted Commit Message Rules

Description:
Ensure commit messages follow standardized best practices.

Rules:
1. Commit message must start with a type (feat, fix, docs, style, refactor, test, chore)
   followed by a colon and a space.
   Example: feat: add new login feature

2. Commit message subject should be no longer than 72 characters.

3. Subject should be written in the imperative mood (e.g., "Add", "Fix", "Update").
   Use imperative verbs in the subject line.

4. Do not end the subject line with a period.

5. If a body is present, separate the subject from the body with a blank line.

6. Body lines should be wrapped at 72 characters.

7. Each feature should be on a new line prefixed with a dash.
Examples:
- feat: add user authentication module
- fix: resolve crash on startup
- docs: update README with installation instructions

---

JSDoc Comments Rules
Description:
Ensure JSDoc comments follow standardized best practices.

Rules:
- Add JSDoc comments above classes only and not types or interfaces.
- Surround documentation with <docs> and </docs> tags, each on their own line. Only applicable to the top of the class comment.
- If a complex type needs a comment, write a normal JavaScript comment without <docs></docs> tags.
- All methods must have documentation. Wrap the comments in <method name="replace_with_name_of_method"> and </method> tags.
Top Level Class Examples:
- /**
  * <docs>
  * Description here.
  *
  * Example or multiple examples here if applicable.
  * 
  * @param {string} name - The name of the example class
  * @param {number} age - The age of the example class
  * </docs>
  */
Method Example:
- /**
  * <method name="calculateTotal">
  * Calculates the total price including tax.
  * 
  * @param {number} price - The base price
  * @param {number} taxRate - The tax rate as a decimal
  * @returns {number} The total price including tax
  * </method>
  */

  
